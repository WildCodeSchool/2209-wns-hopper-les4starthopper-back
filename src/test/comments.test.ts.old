import { afterAll, beforeAll, describe, expect, it } from "@jest/globals";
import { graphql, GraphQLSchema } from "graphql";
import { buildSchema } from "type-graphql";
import { CommentResolver } from "../graphql/resolvers/Comments";
import datasource from "../utils";
import {
  createComment,
  deleteComment,
  deleteComments,
  getComments,
  updateComment,
} from "../utils/testComment";
import { Comment } from "../Entities/Comment";
import { createUser, signin } from "../utils/testsUser";
import { UserResolver } from "../graphql/resolvers/Users";
import { authChecker } from "../graphql/auth";


let schema: GraphQLSchema;
let commentId: number;
let comment: string;
let userId: number;
let role: number;
let userToken: string;
let password: string;

beforeAll(async () => {
  // connect to DB
  await datasource.initialize();
  // compute GraphQL schema
  schema = await buildSchema({
    resolvers: [CommentResolver, UserResolver],
    authChecker
  });
});

describe("comments", () => {
  describe("check comments creation", () => {
    it.skip("creates a new user", async () => {
      const result = await graphql({
        schema,
        source: createUser,
        variableValues: {
          data: {
            email: "testuser1@testuser1.com",
            password: "Supers3cret",
            role: 1,
          },
        },
      });
      userId = result?.data?.createUser?.id;
      role = result?.data?.createUser?.role;
      password = result?.data?.createUser?.password;
      expect(result?.data?.createUser).toBeTruthy();
    });

    it("signin", async () => {
      const result = await graphql({
        schema,
        source: signin,
        variableValues: {
          email: "testuser1@testuser1.com",
          password: "Supers3cret",
          role: 1
        }
      })
      userToken = result?.data?.signin
      expect(result?.data?.signin).toBeDefined()
    });

    it("creates a new comment", async () => {
      const result = await graphql({
        schema,
        source: createComment,
        contextValue: {
          token: userToken
        },
        variableValues: {
          data: {
            comment: "test comment",
            //userId: 324,
            note: 1,
          },
        },
      });
      commentId = result?.data?.createComment?.id;
      comment = result?.data?.createComment?.comment;
      expect(result?.data?.createComment).toBeTruthy();
    });

    it("find all comments in db", async () => {
      const comments = await datasource.getRepository(Comment).find({});
      expect(Array.isArray(comments)).toBeTruthy();
    });

    it("check if the comment is correctly updated", async () => {
      const result = await graphql({
        schema,
        source: updateComment,
        contextValue: {
          token: userToken
        },
        variableValues: {
          commentId: commentId,
          comment: "test UPDATE comment",
          note: 5,
        },
      });
      expect(result.data?.updateComment?.comment !== comment);
    });

    it("check if the selected comment is correctly deleted from DB", async () => {
      const result = await graphql({
        schema,
        source: deleteComment,
        contextValue: {
          token: userToken
        },
        variableValues: {
          commentId: 69,
        },
      });
      expect(result.data?.deleteComment?.id).toBeNull();
    });

    it("check if all comments are correctly deleted from DB", async () => {
      const result = await graphql({
        schema,
        source: deleteComments,
        contextValue: {
          token: userToken
        },
      });
      expect(result.data?.deleteComments.id).toBeNull();
    });
  });
});
