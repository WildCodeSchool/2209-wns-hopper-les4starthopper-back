import { afterAll, beforeAll, describe, expect, it } from "@jest/globals";
import { graphql, GraphQLSchema } from "graphql";
import { buildSchema } from "type-graphql";
import { CommentResolver } from "../graphql/resolvers/Comments";
import datasource from "../utils";
import {
  createCity,
  deleteCities,
  deleteCity,
  getCities,
  getCity,
  updateCity,
} from "../utils/testCity";
import { City } from "../Entities/City";
import { CityResolver } from "../graphql/resolvers/Cities";
import { createUser, signin } from "../utils/testsUser";
import { UserResolver } from "../graphql/resolvers/Users";
import { authChecker } from "../graphql/auth";
import { cleanDb } from "../script/cleanDb";

let schema: GraphQLSchema;
let cityId: number;
let name: string;
let userId: number;
let role: number;
let userToken: string;
let password: string;


beforeAll(async () => {
  // connect to DB
  await datasource.initialize();
  //await cleanDb()
  // compute GraphQL schema
  schema = await buildSchema({
    resolvers: [CityResolver, UserResolver],
    authChecker
  });
});

describe("cities", () => {
  describe("check cities creation", () => {
    it("creates a new user", async () => {
      const result = await graphql({
        schema,
        source: createUser,
        variableValues: {
          data: {
            email: "testuser1@testuser1.com",
            password: "Supers3cret",
            role: 1,
          },
        },
      });
      userId = result?.data?.createUser?.id;
      role = result?.data?.createUser?.role;
      password = result?.data?.createUser?.password;
      expect(result?.data?.createUser).toBeTruthy();
    });

    it("signin", async () => {
      const result = await graphql({
        schema,
        source: signin,
        variableValues: {
          email: "testuser1@testuser1.com",
          password: "Supers3cret",
          role: 1
        }
      })
      userToken = result?.data?.signin
      expect(result?.data?.signin).toBeDefined()
    });

    it("creates a new city", async () => {
      const result = await graphql({
        schema,
        source: createCity,
        contextValue: {
          token: userToken
        },
        variableValues: {
          data: {
            name: "test city name xxx",
          },
        },
      });
      cityId = result?.data?.createCity?.id;
      name = result?.data?.createCity?.name;
      expect(result?.data?.createCity).toBeTruthy();
    });

    it("find all cities in db", async () => {
      const cities = await datasource.getRepository(City).find({});
      expect(Array.isArray(cities)).toBeTruthy();
    });

    it("check if the city is correctly updated", async () => {
      const result = await graphql({
        schema,
        source: updateCity,
        contextValue: {
          token: userToken
        },
        variableValues: {
          cityId: 5,
          name: "test UPDATE city name TEST TEST",
        },
      });
      expect(result.data?.updateComment?.name !== name);
    });

    it("check if the selected city is correctly deleted from DB", async () => {
      const result = await graphql({
        schema,
        source: deleteCity,
        contextValue: {
          token: userToken
        },
        variableValues: {
          cityId: cityId,
        },
      });
      expect(result.data?.deleteCity?.id).toBeNull();
    });

    it("check if all cities are correctly deleted from DB", async () => {
      const result = await graphql({
        schema,
        source: deleteCities,
        contextValue: {
          token: userToken
        },
      });
      expect(result.data?.deleteCities?.id).toBeNull();
    });
  });
});
