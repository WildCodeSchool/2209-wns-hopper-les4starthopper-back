import { afterAll, beforeAll, describe, expect, it } from "@jest/globals";
import { graphql, GraphQLSchema } from "graphql";
import { buildSchema } from "type-graphql";
import { PointOfInterestResolver } from "../graphql/resolvers/PointOfInterests";
import datasource from "../utils";
import {
  PointOfinterests,
  createPointOfInterest,
  deletePointOfInterest,
  deletePointOfinterests,
  pointOfInterest,
  updatePointOfInterest,
} from "../utils/testPointOfInterest";
import { PointOfInterest } from "../Entities/PointOfInterest";
import { createUser, signin } from "../utils/testsUser";
import { UserResolver } from "../graphql/resolvers/Users";
import { authChecker } from "../graphql/auth";


let schema: GraphQLSchema;
let poiId: number;
let description: string;
let userId: number;
let role: number;
let userToken: string;
let password: string;


beforeAll(async () => {
  // connect to DB
  await datasource.initialize();
  // compute GraphQL schema
  schema = await buildSchema({
    resolvers: [PointOfInterestResolver, UserResolver],
    authChecker
  });
});

describe("point of interests", () => {
  describe("check POI creation", () => {
    it.skip("creates a new user", async () => {
      const result = await graphql({
        schema,
        source: createUser,
        variableValues: {
          data: {
            email: "testuser1@testuser1.com",
            password: "Supers3cret",
            role: 1,
          },
        },
      });
      userId = result?.data?.createUser?.id;
      role = result?.data?.createUser?.role;
      password = result?.data?.createUser?.password;
      expect(result?.data?.createUser).toBeTruthy();
    });

    it("signin", async () => {
      const result = await graphql({
        schema,
        source: signin,
        variableValues: {
          email: "testuser1@testuser1.com",
          password: "Supers3cret",
          role: 1
        }
      })
      userToken = result?.data?.signin
      expect(result?.data?.signin).toBeDefined()
    });

    it("creates a new POI", async () => {
      const result = await graphql({
        schema,
        source: createPointOfInterest,
        contextValue: {
          token: userToken
        },
        variableValues: {
          data: {
            name: "test city name xxx",
            description: "test description xxx",
          },
          categoryId: 33,
        },
      });
      poiId = result?.data?.createPointOfInterest?.id;
      description = result?.data?.createPointOfInterest?.description;
      expect(result?.data?.createPointOfInterest).toBeTruthy();
    });

    it("find all POI in db", async () => {
      const pointOfInterests = await datasource
        .getRepository(PointOfInterest)
        .find({});
      expect(Array.isArray(pointOfInterests)).toBeTruthy();
    });

    it("check if the POI is correctly updated", async () => {
      const result = await graphql({
        schema,
        source: updatePointOfInterest,
        contextValue: {
          token: userToken
        },
        variableValues: {
          poiId: 5,
          description: "test UPDATE DESCRIPTION",
        },
      });
      expect(result.data?.updatePointOfInterest?.description !== description);
    });

    it("check if the selected POI is correctly deleted from DB", async () => {
      const result = await graphql({
        schema,
        source: deletePointOfInterest,
        contextValue: {
          token: userToken
        },
        variableValues: {
          poiId: poiId,
        },
      });
      expect(result.data?.deletePointOfInterest?.id).toBeNull();
    });

    it("check if all points of interest are correctly deleted from DB", async () => {
      const result = await graphql({
        schema,
        source: deletePointOfinterests,
        contextValue: {
          token: userToken
        },
      });
      expect(result.data?.deletePointOfinterests?.id).toBeNull();
    });
  });
});
